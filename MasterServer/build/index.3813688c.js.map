{"mappings":"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","sources":["<anon>","src/client/main.js","src/client/ui.js","src/client/internalCommEvent.js","src/client/serverComunication.js"],"sourcesContent":["//import  {addCard } from './card.js';\n/**\n * ui.js -- UI related functions\n * \n */ /**\n * @module internalCommEvent\n * Provides event handlers for internal communication between components\n*/ //event names constants \nconst $884d4dc09ca1b43a$export$4a2e650c134b86af = {\n    connected_to_main_server: \"connected_to_main_server\",\n    connected_to_game_server: \"connected_to_game_server\",\n    disconnected_from_game_server: \"disconnected_from_game_server\",\n    disconnected_from_main_server: \"disconnected_from_main_server\",\n    obtained_game_servers_list: \"obtained_game_servers_list\",\n    refresh_game_servers_list: \"refresh_game_servers_list\",\n    connect_to_game_server: \"connect_to_game_server\"\n};\nfunction $884d4dc09ca1b43a$export$716a11175c03fb4e(_eventName, _detail) {\n    let event = new CustomEvent(_eventName, {\n        detail: _detail\n    });\n    document.dispatchEvent(event);\n}\nfunction $884d4dc09ca1b43a$export$4256f76d7567e2ca(eventNames, callback) {\n    //is eventNames an array of strings?\n    if (!Array.isArray(eventNames)) eventNames = [\n        eventNames\n    ];\n    eventNames.forEach((eventName)=>{\n        document.addEventListener(eventName, callback);\n    });\n}\n\n\n//listen to communication events, create an event -> callback map\nlet $e17787909ec0b430$var$logs = [];\nfunction $e17787909ec0b430$export$538086cfe5d4570() {\n    $884d4dc09ca1b43a$export$4256f76d7567e2ca($884d4dc09ca1b43a$export$4a2e650c134b86af.connected_to_main_server, (e)=>{\n        $e17787909ec0b430$export$a18908926506618b(\"Conectado al servidor principal\");\n    });\n    $884d4dc09ca1b43a$export$4256f76d7567e2ca($884d4dc09ca1b43a$export$4a2e650c134b86af.disconnected_from_main_server, (e)=>{\n        $e17787909ec0b430$export$a18908926506618b(\"Desconectado del servidor principal\");\n    });\n    $884d4dc09ca1b43a$export$4256f76d7567e2ca($884d4dc09ca1b43a$export$4a2e650c134b86af.connected_to_game_server, (e)=>{\n        $e17787909ec0b430$export$a18908926506618b(\"Conectado al servidor de juego\");\n    });\n    $884d4dc09ca1b43a$export$4256f76d7567e2ca($884d4dc09ca1b43a$export$4a2e650c134b86af.disconnected_from_game_server, (e)=>{\n        $e17787909ec0b430$export$a18908926506618b(\"Desconectado del servidor de juego\");\n    });\n    $884d4dc09ca1b43a$export$4256f76d7567e2ca($884d4dc09ca1b43a$export$4a2e650c134b86af.obtained_game_servers_list, (e)=>{\n        $e17787909ec0b430$export$b83e2295a69da4f8(e.detail);\n    });\n    //set refresh button listener\n    let refreshButton = document.getElementById(\"refreshLGSListButton\");\n    refreshButton.addEventListener(\"click\", function() {\n        console.log(\"refresh LGSList button clicked\");\n        document.dispatchEvent(new Event($884d4dc09ca1b43a$export$4a2e650c134b86af.refresh_game_servers_list));\n    });\n}\nfunction $e17787909ec0b430$export$b83e2295a69da4f8(_LGSList) {\n    let table = document.getElementById(\"servers\");\n    //clear table\n    table.innerHTML = \"\";\n    //add column titles again\n    let row = table.insertRow();\n    let cell1 = row.insertCell();\n    let cell2 = row.insertCell();\n    let cell3 = row.insertCell();\n    cell1.innerHTML = \"<b>Server</b>\";\n    cell2.innerHTML = \"<b>Players</b>\";\n    cell3.innerHTML = \"<b>Join</b>\";\n    //add rows\n    for(let i = 0; i < _LGSList.length; i++){\n        let row = table.insertRow();\n        let cell1 = row.insertCell();\n        let cell2 = row.insertCell();\n        let cell3 = row.insertCell();\n        cell1.innerHTML = _LGSList[i].name;\n        cell2.innerHTML = _LGSList[i].players;\n        cell3.innerHTML = \"<button onclick=\\\"document.dispatchEvent(new CustomEvent('connect_to_game_server', {detail: '\" + _LGSList[i].url + \"'}));\\\">Join</button>\";\n    }\n}\nfunction $e17787909ec0b430$export$b8944a752032c9ad(_playerId) {\n    //put a label with the player id\n    //on the top left corner\n    //it must appear on top of the canvas\n    //it must ignore the camera and interactions\n    let text = new fabric.IText(\"PLAYER: \" + _playerId, {\n        left: 10,\n        top: 10,\n        fontSize: 16,\n        fill: \"black\",\n        selectable: false\n    });\n    GAME.canvas.add(text);\n}\nfunction $e17787909ec0b430$export$9b6d6ca62970729f(_text, _left, _top, _width, _height, _callback) {\n    let button = new fabric.Rect({\n        left: _left,\n        top: _top,\n        width: _width,\n        height: _height,\n        fill: \"white\",\n        stroke: \"black\",\n        strokeWidth: 1,\n        selectable: false\n    });\n    let text = new fabric.IText(_text, {\n        left: _left + _width / 2,\n        top: _top + _height / 2,\n        fontSize: 26,\n        fill: \"black\",\n        selectable: false\n    });\n    let group = new fabric.Group([\n        button,\n        text\n    ], {\n        left: _left,\n        top: _top,\n        selectable: false\n    });\n    group.on(\"mousedown\", function() {\n        _callback();\n    });\n    GAME.canvas.add(group);\n}\nfunction $e17787909ec0b430$export$a18908926506618b(_log) {\n    $e17787909ec0b430$var$logs.push(_log);\n    $e17787909ec0b430$var$update_state();\n}\nfunction $e17787909ec0b430$var$update_state() {\n    //get the state div\n    let stateDiv = document.getElementById(\"status-list\");\n    //clear the state div\n    stateDiv.innerHTML = \"\";\n    //add a ul\n    let ul = document.createElement(\"ul\");\n    stateDiv.appendChild(ul);\n    // and a li for each log, only the last 6 logs\n    if ($e17787909ec0b430$var$logs.length > 6) $e17787909ec0b430$var$logs = $e17787909ec0b430$var$logs.slice($e17787909ec0b430$var$logs.length - 6);\n    for(let i = 0; i < $e17787909ec0b430$var$logs.length; i++){\n        let li = document.createElement(\"li\");\n        li.innerHTML = $e17787909ec0b430$var$logs[i];\n        ul.appendChild(li);\n    }\n}\n\n\n\nclass $4f9858312e20cfe3$var$SocketClient {\n    constructor(_url = \"http://localhost:3000\"){\n        this.mainServerUrl = _url;\n        this.mainServerSocket = null; // Instantiate the socket to null, it should not be declared until connect\n        this.gameServerUrl = null;\n        this.gameServerSocket = null;\n        this.playerId = null;\n        this.LGSList = [];\n        this.connectStatus = {\n            connectedToLobby: false,\n            connectedToGame: false\n        };\n    }\n    //Connect to main server to get the list of LGS\n    connectToMainServer() {\n        this.mainServerSocket = io(this.mainServerUrl);\n        this.mainServerSocket.on(\"connect\", ()=>{\n            this.connectStatus.connectedToLobby = true;\n            $884d4dc09ca1b43a$export$716a11175c03fb4e($884d4dc09ca1b43a$export$4a2e650c134b86af.connected_to_main_server, this.connectStatus);\n            console.log(\"connected to main server\");\n            this.getLGSList();\n            document.addEventListener($884d4dc09ca1b43a$export$4a2e650c134b86af.refresh_game_servers_list, (e)=>{\n                this.getLGSList();\n            });\n            //if asked try to connect to game server\n            document.addEventListener($884d4dc09ca1b43a$export$4a2e650c134b86af.connect_to_game_server, (e)=>{\n                console.log(\"connect to game server event received: \" + JSON.stringify(e.detail));\n                this.connectToGameServer(e.detail);\n            });\n        });\n        this.mainServerSocket.on(\"disconnect\", ()=>{\n            this.connectStatus.connectedToLobby = false;\n            this.connectStatus.connectedToGame = false;\n            $884d4dc09ca1b43a$export$716a11175c03fb4e($884d4dc09ca1b43a$export$4a2e650c134b86af.disconnected_from_main_server, this.connectStatus);\n            console.log(\"disconnected from main server\");\n        });\n        this.mainServerSocket.on(\"LGSList\", (LGSList)=>{\n            this.LGSList = LGSList;\n            console.log(\"LGSList received: \" + JSON.stringify(this.LGSList));\n            $884d4dc09ca1b43a$export$716a11175c03fb4e($884d4dc09ca1b43a$export$4a2e650c134b86af.obtained_game_servers_list, this.LGSList);\n        });\n    }\n    /**\n     * Ask the main server for the list of game servers\n     */ getLGSList() {\n        this.mainServerSocket.emit(\"getLGSList\");\n        console.log(\"getLGSList sent\");\n    }\n    /**\n    * Connect to the game server\n    */ connectToGameServer(_gameServerUrl) {\n        this.gameServerUrl = _gameServerUrl;\n        //disconnect from previous game server if any\n        if (this.gameServerSocket) this.gameServerSocket.disconnect();\n        console.log(\"connecting to game server: \" + this.gameServerUrl);\n        this.gameServerSocket = io(this.gameServerUrl);\n        this.gameServerSocket.on(\"connect\", ()=>{\n            this.connectStatus.connectedToGame = true;\n            $884d4dc09ca1b43a$export$716a11175c03fb4e($884d4dc09ca1b43a$export$4a2e650c134b86af.connected_to_game_server, this.connectStatus);\n            console.log(\"connected to game server\");\n            //listen to all game server events and print them\n            this.gameServerSocket.onAny((eventName, data)=>{\n                console.log(\"game server event received: \" + eventName + \" \" + JSON.stringify(data));\n            });\n            this.sendPlayerId(this.gameServerSocket);\n        });\n        this.gameServerSocket.on(\"disconnect\", ()=>{\n            this.connectStatus.connectedToGame = false;\n            $884d4dc09ca1b43a$export$716a11175c03fb4e($884d4dc09ca1b43a$export$4a2e650c134b86af.disconnected_from_game_server, this.connectStatus);\n            //reconnect to main server\n            this.connectToMainServer();\n        });\n    }\n    /**\n     * send the player id to the game server\n     * \n     * @param {*} socket\n     */ sendPlayerId(socket) {\n        let pid = this.generatePlayerId();\n        socket.emit(\"playerId\", pid);\n        console.log(\"playerId sent: \" + pid);\n    }\n    //generate a random player id\n    generatePlayerId() {\n        //check if already generated on local storage\n        let pid = localStorage.getItem(\"playerId\");\n        if (pid) return pid;\n        //generate a new one\n        pid = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n        localStorage.setItem(\"playerId\", pid);\n        return pid;\n    }\n}\n//create an instance of the socket client and share it\nconst $4f9858312e20cfe3$var$serverIP = \"http://localhost:3000\";\nconst $4f9858312e20cfe3$export$56ed02b057e90fbb = new $4f9858312e20cfe3$var$SocketClient($4f9858312e20cfe3$var$serverIP);\n\n\n(0, $e17787909ec0b430$export$538086cfe5d4570)();\n//listen and print all events\ndocument.addEventListener(\"*\", function(e) {\n    console.log(\"event: \" + e.type + \" data: \" + JSON.stringify(e.detail));\n});\n(0, $4f9858312e20cfe3$export$56ed02b057e90fbb).connectToMainServer();\n//star fabric canvas\n//listen to the \"pending_redraw\" event\ndocument.addEventListener(\"pending_redraw\", (e)=>{\n    console.log(\"pending_redraw\");\n    $25132d3b0bf2d7ad$var$draw();\n});\n//message received from the server listener\ndocument.addEventListener(\"message_received\", (e)=>{\n    (0, $e17787909ec0b430$export$a18908926506618b)(e.detail);\n});\n(0, $e17787909ec0b430$export$b8944a752032c9ad)((0, $4f9858312e20cfe3$export$56ed02b057e90fbb).playerId);\nfunction $25132d3b0bf2d7ad$var$draw() {\n    GAME.canvas.renderAll();\n}\n//create add card button\nfunction $25132d3b0bf2d7ad$var$addCardButtonFunction() {\n    //card optoins ojbect\n    const cardOptions = {\n        left: 80,\n        top: 80,\n        stroke: \"rgb(0,0,10)\",\n        strokeWidth: 2,\n        shadow: \"rgba(0,0,0,0.5) 5px 5px 5px\",\n        selectable: true,\n        id: \"card\" + objects.length,\n        sideUP: \"front\",\n        frontImage: \"/resources/f01.png\",\n        backImage: \"/resources/b1.png\",\n        flipeable: true\n    };\n    //add rge  card locally and send it to the server\n    let card = addCard(cardOptions);\n//objects.push(card);\n//send objects to the server\n//socketClient.socketClient.emit('objects', objects); // Send the new position to the server\n}\n//createButton(\"addCard\", 100,10,150,100, addCardButtonFunction, canvas);\n//background Image TO BE DRAWN on tiles\nlet $25132d3b0bf2d7ad$var$tablesize = 10000;\nfabric.Object.prototype.transparentCorners = false;\nfunction $25132d3b0bf2d7ad$var$loadPattern(url) {\n    fabric.util.loadImage(url, function(img) {\n        var pattern = new fabric.Pattern({\n            source: img,\n            repeat: \"no-repeat\",\n            selectable: false,\n            hasBorders: false,\n            hasControls: false\n        });\n        var rectSize = img.width - 5;\n        for(var i = 0; i < $25132d3b0bf2d7ad$var$tablesize; i += rectSize)for(var j = 0; j < $25132d3b0bf2d7ad$var$tablesize; j += rectSize){\n            var rect = new fabric.Rect({\n                left: i,\n                top: j,\n                width: rectSize,\n                height: rectSize,\n                fill: pattern,\n                selectable: false,\n                hasBorders: false,\n                hasControls: false\n            });\n            GAME.canvas.add(rect);\n        }\n        GAME.canvas.renderAll();\n    });\n}\n$25132d3b0bf2d7ad$var$loadPattern(\"resources/green3.jpg\");\nGAME.canvas.on(\"object:moving\", function(options) {});\nGAME.canvas.on(\"object:modified\", function(options) {\n    (0, $e17787909ec0b430$export$a18908926506618b)(\"dragged \" + options.target.id + \" to \" + options.target.left + \",\" + options.target.top, GAME.canvas);\n    (0, $4f9858312e20cfe3$export$56ed02b057e90fbb).mainServersocketClient.emit(\"move\", {\n        id: options.target.id,\n        pos: {\n            x: options.target.left,\n            y: options.target.top\n        }\n    }); // Send the new position to the server\n});\n\n\n//# sourceMappingURL=index.3813688c.js.map\n","//import  {addCard } from './card.js';\nimport { drawUI, addLog, createButton,initUI } from './ui.js';\nimport {socketClient}  from './serverComunication.js';\n\ninitUI();\n//listen and print all events\ndocument.addEventListener(\"*\", function (e) {\n  console.log(\"event: \" + e.type + \" data: \" + JSON.stringify(e.detail));\n});\nsocketClient.connectToMainServer();\n\n//star fabric canvas\n\n\n\n\n//listen to the \"pending_redraw\" event\ndocument.addEventListener(\"pending_redraw\", (e) => {\n   console.log(\"pending_redraw\");\n    draw();\n});\n\n//message received from the server listener\ndocument.addEventListener(\"message_received\", (e) => {\n        addLog(e.detail);\n    }\n);\n\n    drawUI(socketClient.playerId);\n\nfunction draw() {\n  GAME.canvas.renderAll();\n}\n\n\n//create add card button\nfunction addCardButtonFunction(){\n    //card optoins ojbect\n\nconst cardOptions = {\n    left: 80,\n    top: 80,\n    stroke: \"rgb(0,0,10)\",\n    strokeWidth: 2,\n    shadow: \"rgba(0,0,0,0.5) 5px 5px 5px\",\n    selectable: true,\n    id: \"card\" + objects.length,\n    sideUP: \"front\",\n    frontImage: \"/resources/f01.png\",\n    backImage: \"/resources/b1.png\",\n    flipeable: true\n  };\n  \n//add rge  card locally and send it to the server\nlet card =addCard(cardOptions);\n//objects.push(card);\n//send objects to the server\n//socketClient.socketClient.emit('objects', objects); // Send the new position to the server\n}\n//createButton(\"addCard\", 100,10,150,100, addCardButtonFunction, canvas);\n//background Image TO BE DRAWN on tiles\nlet tablesize=10000;\nfabric.Object.prototype.transparentCorners = false;\n\n  function loadPattern(url) {\n    fabric.util.loadImage(url, function(img) {\n      var pattern = new fabric.Pattern({\n        source: img,\n        repeat: 'no-repeat',\n        selectable: false,\n        hasBorders: false,\n        hasControls: false\n      });\n  \n      var rectSize = img.width -5;\n      for (var i = 0; i < tablesize; i += rectSize) {\n        for (var j = 0; j < tablesize; j += rectSize) {\n          var rect = new fabric.Rect({\n            left: i,\n            top: j,\n            width: rectSize,\n            height: rectSize,\n            fill: pattern,\n            selectable: false,\n            hasBorders: false,\n            hasControls: false\n          });\n          GAME.canvas.add(rect);\n        }\n      }\n      GAME.canvas.renderAll();\n    });\n  }\n\n  loadPattern('resources/green3.jpg');\n\nGAME.canvas.on(\"object:moving\", function (options) { });\n\nGAME.canvas.on(\"object:modified\", function (options) {\n  addLog(\n    \"dragged \" +\n    options.target.id +\n    \" to \" +\n    options.target.left +\n    \",\" +\n    options.target.top,\n    GAME.canvas\n  );\n  socketClient.mainServersocketClient.emit(\"move\", {\n    id: options.target.id,\n    pos: { x: options.target.left, y: options.target.top },\n  }); // Send the new position to the server\n});\n\n\n","/**\n * ui.js -- UI related functions\n * \n */\n\nimport * as evt from \"./internalCommEvent.js\";\n\n//listen to communication events, create an event -> callback map\n\nlet logs = [];\n\nexport function initUI() {\n\nevt.registerEventListeners(evt.eventNames.connected_to_main_server, (e) => {\n    addLog(\"Conectado al servidor principal\");\n})\n\nevt.registerEventListeners(evt.eventNames.disconnected_from_main_server, (e) => {\n    addLog(\"Desconectado del servidor principal\");\n})\n\nevt.registerEventListeners(evt.eventNames.connected_to_game_server, (e) => {\n    addLog(\"Conectado al servidor de juego\");\n})\n\nevt.registerEventListeners(evt.eventNames.disconnected_from_game_server, (e) => {\n    addLog(\"Desconectado del servidor de juego\");\n})\n\nevt.registerEventListeners(evt.eventNames.obtained_game_servers_list, (e) => {\n    updateLGSList(e.detail);\n})\n\n//set refresh button listener\nlet refreshButton = document.getElementById(\"refreshLGSListButton\");\nrefreshButton.addEventListener(\"click\", function () {\n    console.log(\"refresh LGSList button clicked\");\n    document.dispatchEvent(new Event(evt.eventNames.refresh_game_servers_list));\n}\n);\n\n}\n//get  and update the table of local game servers\n/*<table id=\"servers\">\n            <tr>\n                <th>Server</th>\n                <th>Players</th>\n                <th>Join</th>\n            </tr>\n        </table>*/\nexport function updateLGSList(_LGSList) {\n    let table = document.getElementById(\"servers\");\n    //clear table\n    table.innerHTML = \"\";\n    //add column titles again\n    let row = table.insertRow();\n    let cell1 = row.insertCell();\n    let cell2 = row.insertCell();\n    let cell3 = row.insertCell();\n    cell1.innerHTML = \"<b>Server</b>\";\n    cell2.innerHTML = \"<b>Players</b>\";\n    cell3.innerHTML = \"<b>Join</b>\";\n\n    //add rows\n    for (let i = 0; i < _LGSList.length; i++) {\n        let row = table.insertRow();\n        let cell1 = row.insertCell();\n        let cell2 = row.insertCell();\n        let cell3 = row.insertCell();\n        cell1.innerHTML = _LGSList[i].name;\n        cell2.innerHTML = _LGSList[i].players;\n        cell3.innerHTML = \"<button onclick=\\\"document.dispatchEvent(new CustomEvent('connect_to_game_server', {detail: '\" + _LGSList[i].url + \"'}));\\\">Join</button>\";\n    }\n\n    }\n\n\n\n//  ----------    canvas ui      ----------------------\n\nexport function drawUI(_playerId){\n    //put a label with the player id\n    //on the top left corner\n    //it must appear on top of the canvas\n    //it must ignore the camera and interactions\n    let text = new fabric.IText(\"PLAYER: \" + _playerId, {\n        left: 10,\n        top: 10,\n        fontSize: 16,\n        fill: 'black',\n        selectable: false\n    });\n    GAME.canvas.add(text);\n}\n\n//generic function to create a button\nexport function createButton(_text, _left, _top, _width, _height, _callback){\n    let button = new fabric.Rect({\n        left: _left,\n        top: _top,\n        width: _width,\n        height: _height,\n        fill: 'white',\n        stroke: 'black',\n        strokeWidth: 1,\n        selectable: false\n    });\n    let text = new fabric.IText(_text, {\n        left: _left + _width / 2,\n        top: _top + _height / 2,\n        fontSize: 26,\n        fill: 'black',\n        selectable: false\n    });\n    let group = new fabric.Group([ button, text ], {\n        left: _left,\n        top: _top,\n        selectable: false\n    });\n    group.on('mousedown', function() {\n        _callback();\n    });\n    GAME.canvas.add(group);\n}\n\n\n\nexport function addLog(_log){\n    logs.push(_log);\n    update_state();\n}\n\nfunction update_state(){\n    //get the state div\n    let stateDiv = document.getElementById(\"status-list\");\n    //clear the state div\n    stateDiv.innerHTML = \"\";\n    //add a ul\n    let ul = document.createElement(\"ul\");\n    stateDiv.appendChild(ul);\n    // and a li for each log, only the last 6 logs\n    if(logs.length > 6){\n        logs = logs.slice(logs.length - 6);\n    }\n    for(let i = 0; i < logs.length; i++){\n        let li = document.createElement(\"li\");\n        li.innerHTML = logs[i];\n        ul.appendChild(li);\n        \n    }\n    \n}\n","/**\n * @module internalCommEvent\n * Provides event handlers for internal communication between components\n*/\n\n//event names constants \nexport const eventNames = {\n    connected_to_main_server: \"connected_to_main_server\",\n    connected_to_game_server: \"connected_to_game_server\",\n    disconnected_from_game_server: \"disconnected_from_game_server\",\n    disconnected_from_main_server: \"disconnected_from_main_server\",\n    obtained_game_servers_list: \"obtained_game_servers_list\",\n    refresh_game_servers_list: \"refresh_game_servers_list\",\n    connect_to_game_server: \"connect_to_game_server\"\n}\n\n/**\n * dispatches an event to the web document\n * @param {*} _eventName //event name to be dispatched\n * @param {*} _detail //data to be dispatched with the event (optional)\n */\nexport function dispatchEvent(_eventName, _detail) {\n    let event = new CustomEvent(_eventName, { detail: _detail });\n    document.dispatchEvent(event);\n}\n\n/**\n * Registers event listeners for each event name and triggers the given function.\n * @param {string[]} eventNames - The names of the events to listen for.\n * @param {function} callback - The function to trigger when an event is fired.\n */\nexport function registerEventListeners(eventNames, callback) {\n    //is eventNames an array of strings?\n    if (!Array.isArray(eventNames)) {\n        eventNames = [eventNames];\n    }\n\n    eventNames.forEach(eventName => {\n        document.addEventListener(eventName, callback);\n    });\n}\n\n\n","\nimport * as evt from \"./internalCommEvent.js\";\n\nclass SocketClient {\n    constructor(_url = \"http://localhost:3000\") {\n        this.mainServerUrl = _url;\n        this.mainServerSocket = null;  // Instantiate the socket to null, it should not be declared until connect\n        this.gameServerUrl = null;\n        this.gameServerSocket = null;\n        this.playerId = null;\n        this.LGSList = [];\n        this.connectStatus = {\n            connectedToLobby: false,\n            connectedToGame: false\n        }\n    }\n\n    //Connect to main server to get the list of LGS\n    connectToMainServer() {\n        this.mainServerSocket = io(this.mainServerUrl);\n        this.mainServerSocket.on('connect', () => {\n            this.connectStatus.connectedToLobby = true;\n            evt.dispatchEvent(evt.eventNames.connected_to_main_server, this.connectStatus);\n            console.log(\"connected to main server\");\n            this.getLGSList();\n            document.addEventListener(evt.eventNames.refresh_game_servers_list, (e) => {\n                this.getLGSList();\n            }\n            );\n            //if asked try to connect to game server\n            document.addEventListener(evt.eventNames.connect_to_game_server, (e) => {\n                console.log(\"connect to game server event received: \" + JSON.stringify(e.detail));\n                this.connectToGameServer(e.detail);\n            }\n            );\n        });\n        this.mainServerSocket.on('disconnect', () => {\n            this.connectStatus.connectedToLobby = false;\n            this.connectStatus.connectedToGame = false;\n            evt.dispatchEvent(evt.eventNames.disconnected_from_main_server, this.connectStatus);\n            console.log(\"disconnected from main server\");\n        });\n        this.mainServerSocket.on('LGSList', (LGSList) => {\n            this.LGSList = LGSList;\n            console.log(\"LGSList received: \" + JSON.stringify(this.LGSList));\n            evt.dispatchEvent(evt.eventNames.obtained_game_servers_list, this.LGSList);\n        });\n    }\n\n    /**\n     * Ask the main server for the list of game servers\n     */\n\n    getLGSList() {\n        this.mainServerSocket.emit('getLGSList');\n        console.log(\"getLGSList sent\");\n    }\n\n    /**\n    * Connect to the game server\n    */\n    connectToGameServer(_gameServerUrl) {\n        this.gameServerUrl = _gameServerUrl;\n        //disconnect from previous game server if any\n        if (this.gameServerSocket) {\n            this.gameServerSocket.disconnect();\n        }\n       \n        console.log(\"connecting to game server: \" + this.gameServerUrl);\n        this.gameServerSocket = io(this.gameServerUrl);\n\n        this.gameServerSocket.on('connect', () => {\n            this.connectStatus.connectedToGame = true;\n            evt.dispatchEvent(evt.eventNames.connected_to_game_server, this.connectStatus);\n            console.log(\"connected to game server\");\n            //listen to all game server events and print them\n            this.gameServerSocket.onAny((eventName, data) => {\n                console.log(\"game server event received: \" + eventName + \" \" + JSON.stringify(data));\n            })\n            this.sendPlayerId(this.gameServerSocket);        \n            }); \n        this.gameServerSocket.on('disconnect', () => {\n            this.connectStatus.connectedToGame = false;\n            evt.dispatchEvent(evt.eventNames.disconnected_from_game_server, this.connectStatus);\n            //reconnect to main server\n            this.connectToMainServer();\n        });\n    }\n\n    /**\n     * send the player id to the game server\n     * \n     * @param {*} socket\n     */\n    sendPlayerId(socket) {\n        let pid = this.generatePlayerId();\n        socket.emit('playerId', pid);\n        console.log(\"playerId sent: \" + pid);\n    }\n\n    //generate a random player id\n    generatePlayerId() {\n        //check if already generated on local storage\n        let pid = localStorage.getItem(\"playerId\");\n        if (pid) {\n            return pid;\n        }\n        //generate a new one\n        pid = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n        localStorage.setItem(\"playerId\", pid);\n        return pid;\n    }\n}\n\n\n\n\n//create an instance of the socket client and share it\nconst serverIP = \"http://localhost:3000\";\nconst socketClient = new SocketClient(serverIP);\n\nexport { socketClient };\n"],"names":["_playerId","text","$884d4dc09ca1b43a$export$4a2e650c134b86af","connected_to_main_server","connected_to_game_server","disconnected_from_game_server","disconnected_from_main_server","obtained_game_servers_list","refresh_game_servers_list","connect_to_game_server","$884d4dc09ca1b43a$export$716a11175c03fb4e","_eventName","_detail","event","CustomEvent","detail","document","dispatchEvent","$884d4dc09ca1b43a$export$4256f76d7567e2ca","eventNames","callback","Array","isArray","forEach","eventName","addEventListener","$e17787909ec0b430$var$logs","$e17787909ec0b430$export$a18908926506618b","_log","push","$e17787909ec0b430$var$update_state","stateDiv","getElementById","innerHTML","ul","createElement","appendChild","length","slice","i","li","$4f9858312e20cfe3$export$56ed02b057e90fbb","constructor","_url","mainServerUrl","mainServerSocket","gameServerUrl","gameServerSocket","playerId","LGSList","connectStatus","connectedToLobby","connectedToGame","connectToMainServer","io","on","console","log","getLGSList","e","JSON","stringify","connectToGameServer","emit","_gameServerUrl","disconnect","onAny","data","sendPlayerId","socket","pid","generatePlayerId","localStorage","getItem","Math","random","toString","substring","setItem","$e17787909ec0b430$export$b83e2295a69da4f8","_LGSList","table","row","insertRow","cell1","insertCell","cell2","cell3","name","players","url","refreshButton","Event","type","GAME","canvas","renderAll","fabric","IText","left","top","fontSize","fill","selectable","add","Object","prototype","transparentCorners","util","loadImage","img","pattern","Pattern","source","repeat","hasBorders","hasControls","rectSize","width","j","rect","Rect","height","options","target","id","mainServersocketClient","pos","x","y"],"version":3,"file":"index.3813688c.js.map"}