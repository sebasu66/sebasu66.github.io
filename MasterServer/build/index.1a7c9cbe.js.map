{"mappings":"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","sources":["<anon>","src/client/globalInteractionManager.js","src/components/CustomFabricClasses.js","src/components/animMenu/animMenu.js","src/components/animMenu/animMenuItem.js","src/client/fabricImpl.js"],"sourcesContent":["//import all components\nfunction $17c8ab3e48388a81$export$81217b2b7b74004d(options, onComplete) {\n    console.log(\"createInteractiveComponentGrp: \", options);\n    $17c8ab3e48388a81$var$createFrontImage(options, onComplete);\n}\n//create two images, one for the front and one for the back\n//and add them to the group\n//the front image is the one that will be displayed\n//the back image is the one that will be displayed when the card is flipped\nconst $17c8ab3e48388a81$var$createFrontImage = (options, onComplete)=>{\n    let frontImage = new fabric.Image.fromURL(options.frontImage, (frontImage)=>{\n        frontImage.set({\n            originX: \"center\",\n            originY: \"center\",\n            opacity: options.sideUp == \"front\" ? 1 : 0\n        });\n        console.log(\"frontImage: \", frontImage);\n        $17c8ab3e48388a81$var$createBackImage(frontImage, options, onComplete);\n    });\n};\nconst $17c8ab3e48388a81$var$createBackImage = (frontImage, options, onComplete)=>{\n    let backImage = new fabric.Image.fromURL(options.backImage, (backImage)=>{\n        backImage.set({\n            originX: \"center\",\n            originY: \"center\",\n            opacity: options.sideUp == \"back\" ? 1 : 0\n        });\n        console.log(\"backImage: \", backImage);\n        $17c8ab3e48388a81$var$createGroup(frontImage, backImage, options, onComplete);\n    });\n};\nconst $17c8ab3e48388a81$var$createGroup = (frontImage, backImage, options, onComplete)=>{\n    // Create a new group with fabric.Group\n    let group = new fabric.Group([\n        frontImage,\n        backImage\n    ], {\n        left: options.left,\n        top: options.top,\n        //black stroke, 2px, opacity 0.5\n        stroke: \"rgb(0,0,10)\",\n        strokeWidth: 2,\n        selectable: options.selectable,\n        id: options.id,\n        sideUp: options.sideUp,\n        isFlipeable: options.flipeable,\n        isDraggable: options.draggable ? options.draggable : true,\n        isLocked: options.locked ? options.locked : false,\n        isDragging: false,\n        shadow: {\n            color: \"rgba(0,0,0,1)\",\n            blur: 1,\n            offsetX: 10,\n            offsetY: 10\n        },\n        borderOpacityWhenMoving: 0.5,\n        hasControls: false\n    });\n    console.log(\"group: \", group);\n    // Method to activate the group\n    group.activate = function() {\n        this.active = true;\n        if (this.onActivate) this.onActivate();\n    };\n    // Method to deactivate the group\n    group.deactivate = function() {\n        this.active = false;\n        if (this.onDeactivate) this.onDeactivate();\n    };\n    // Method to check if the group can be dragged\n    group.canBeDragged = function() {\n        return this.isDraggable && !this.isLocked;\n    };\n    // Method to initiate drag\n    group.dragStart = function() {\n        if (!this.canBeDragged() || this.isDragging) return;\n        console.log(\"dragStart\");\n        let initialBlur = this.shadow.blur;\n        let initialOffsetX = this.shadow.offsetX;\n        let initialOffsetY = this.shadow.offsetY;\n        this.animate({\n            scaleX: 1.1,\n            scaleY: 1.1,\n            shadow: {\n                //blur: 3,\n                offsetX: initialOffsetX + 25,\n                offsetY: initialOffsetY + 25\n            }\n        }, {\n            duration: 200,\n            onChange: ()=>{\n                GAME.canvas.renderAll();\n            },\n            onComplete: function() {},\n            easing: fabric.util.ease.easeInOutQuad\n        });\n        this.isDragging = true;\n    };\n    // Method to end drag\n    group.dragEnd = function() {\n        this.isDragging = false;\n        let currentBlur = this.shadow.blur;\n        let currentOffsetX = this.shadow.offsetX;\n        let currentOffsetY = this.shadow.offsetY;\n        this.animate({\n            scaleX: 1,\n            scaleY: 1,\n            shadow: {\n                blur: 0.1,\n                offsetX: currentOffsetX - 5,\n                offsetY: currentOffsetY - 5\n            }\n        }, {\n            duration: 100,\n            onChange: ()=>{\n                GAME.canvas.renderAll();\n            },\n            onComplete: function() {\n                // Sync with server here\n                GAME.syncWithServer();\n            },\n            easing: fabric.util.ease.easeInOutQuad\n        });\n    };\n    // Method to convert the group to JSON\n    group.toJson = function() {\n        const options = {\n            left: this.left,\n            top: this.top,\n            selectable: this.selectable,\n            id: this.id,\n            sideUP: this.sideUP,\n            frontImage: this.frontImage,\n            backImage: this.backImage,\n            flipeable: this.isFlipeable,\n            draggable: this.isDraggable,\n            locked: this.isLocked,\n            canvas: GAME.canvas.name\n        };\n        return options;\n    };\n    // Method to update the group from JSON\n    group.updateFromJson = function(json) {\n        if (json.sideUP != this.sideUP) this.flip();\n        this.animate({\n            left: json.left,\n            top: json.top\n        }, {\n            duration: 100,\n            onChange: GAME.canvas.renderAll.bind(GAME.canvas),\n            onComplete: function() {},\n            easing: fabric.util.ease.easeInOutQuad\n        });\n    };\n    // Call onComplete function\n    onComplete(group);\n};\n\n\n/**\n * @fileoverview animMenuitem.js creates a menu item for the animMenu\n **/ /**\n * \n * @param {*} options : options for the menu item, including the image, text, and action\n * @param {*} callback : callback function to call when the menu item is created\n */ const $5e8f84e13a16e667$export$8cc41bc22046193e = (options, callback = ()=>{})=>{\n    try {\n        let img = new fabric.Image.fromURL(options.image, function(img) {\n            img.set({\n                left: options.left,\n                top: options.top,\n                selectable: false\n            });\n            let text = new fabric.IText(options.text, {\n                //pivot on the left side of the text\n                originX: \"left\",\n                left: options.left + 680,\n                top: options.top + 15,\n                fontSize: 120,\n                fill: \"black\",\n                height: 80,\n                width: 1500,\n                selectable: false\n            });\n            let group = new fabric.Group([\n                img,\n                text\n            ], {\n                visible: false,\n                selectable: false,\n                //start really small then animate to normal size on hover\n                scaleX: 0.1,\n                extend: function() {\n                    group.visible = true;\n                    group.animate({\n                        scaleX: 1,\n                        scaleY: 1\n                    }, {\n                        duration: 200,\n                        onChange: GAME.canvas.renderAll.bind(GAME.canvas),\n                        onComplete: function() {},\n                        easing: fabric.util.ease.easeInOutQuad\n                    });\n                },\n                contract: function() {\n                    group.animate({\n                        scaleX: 0.1\n                    }, {\n                        duration: 200,\n                        onChange: GAME.canvas.renderAll.bind(GAME.canvas),\n                        onComplete: function() {\n                            group.visible = false;\n                        },\n                        easing: fabric.util.ease.easeInOutQuad\n                    });\n                }\n            });\n            GAME.canvas.add(group);\n            //listen for taps on the button\n            //and perform the action\n            group.on(\"mousedown\", function() {\n                console.log(\"anim menu item clicked\");\n                options.action();\n            });\n            callback(group);\n            return group;\n        });\n    } catch (error) {\n        //TODO: handle error, implement logging\n        console.log(error);\n    }\n};\n\n\n/***\n * a grouup of animated menu items\n * and a trigger element\n * \n * */ const $9b86c2780df4ee1e$var$animMenDefaultOptions = {\n    left: 50,\n    top: 50,\n    trigger: {\n        x0: 50,\n        y0: 50,\n        x1: 250,\n        y1: 250\n    },\n    menuItems: [\n        {\n            left: 50,\n            top: 50,\n            image: \"./components/animMenu/ribbon.png\",\n            text: \"Draw\",\n            action: function() {\n                console.log(\"draw\");\n            }\n        },\n        {\n            left: 50,\n            top: 50,\n            image: \"./components/animMenu/ribbon.png\",\n            text: \"shufle\",\n            action: function() {\n                console.log(\"shuffle\");\n            }\n        },\n        {\n            left: 50,\n            top: 50,\n            image: \"./components/animMenu/ribbon.png\",\n            text: \"action\",\n            action: function() {\n                console.log(\"action\");\n            }\n        }\n    ]\n};\nconst $9b86c2780df4ee1e$export$b754317b91e90b58 = (options = $9b86c2780df4ee1e$var$animMenDefaultOptions)=>{\n    //a collision box to detect clicks/ touches\n    let collisionBox = new fabric.Rect({\n        left: options.trigger.x0,\n        top: options.trigger.y0,\n        width: options.trigger.x1 - options.trigger.x0,\n        height: options.trigger.y1 - options.trigger.y0,\n        fill: \"transparent\",\n        selectable: false,\n        //if game.debug is true, show the collision box\n        borderColor: \"red\",\n        strokeWidth: GAME.debug ? 1 : 0,\n        hoverCursor: \"pointer\"\n    });\n    //list of menu items\n    let menuItems = [];\n    //create the menu items\n    for(let i = 0; i < options.menuItems.length; i++){\n        let menuItem = (0, $5e8f84e13a16e667$export$8cc41bc22046193e)(options.menuItems[i]);\n        menuItems.push(menuItem);\n    }\n    //create the menu group\n    let menu = new InteractiveComponentGrp([\n        collisionBox,\n        ...menuItems\n    ], {\n        left: options.left,\n        top: options.top,\n        selectable: false,\n        clipTo: null,\n        //set the anchor point to the top left corner\n        originX: \"left\",\n        originY: \"top\",\n        scaleX: 1,\n        scaleY: 1,\n        onActivate: function() {\n            console.log(\"menu activated\");\n            //show each menu item in sequence with a delay\n            for(let i = 0; i < menuItems.length; i++)setTimeout(function() {\n                menuItems[i].extend();\n            }, i * 100);\n            animMenu.extend();\n        },\n        onDeactivate: function() {\n            console.log(\"menu deactivated\");\n            //hide each menu item in sequence with a delay\n            for(let i = 0; i < menuItems.length; i++)setTimeout(function() {\n                menuItems[i].contract();\n            }, i * 100);\n        }\n    });\n    collisionBox.on(\"mousedown\", function(options) {\n        console.log(\"clicked on collision box\");\n        //toggle the menu\n        if (menu.active) menu.deactivate();\n        else menu.activate();\n    });\n    GAME.canvas.add(menu);\n    return menu;\n};\n\n\nfunction $56c6f821917e065e$export$fdf7826c4b4a6c3f(options, propagate = true, callback = function(card) {}) {\n    let card = new fabric.Image.fromURL(options.frontImage, function(card) {\n        card.set({\n            left: options.left,\n            top: options.top,\n            stroke: options.stroke,\n            strokeWidth: options.strokeWidth,\n            shadow: options.shadow,\n            selectable: options.selectable,\n            id: options.id,\n            sideUP: options.sideUP,\n            frontImage: options.frontImage,\n            backImage: options.backImage,\n            flipeable: options.flipeable,\n            dragStart: dragObj(card),\n            dragEnd: dragObjEnd(card),\n            flip: function() {\n                //swith the image to cardGenBkg\n                card.sideUP = card.sideUP == \"back\" ? \"front\" : \"back\";\n                //animate the flip\n                card.animate({\n                    scaleX: 0,\n                    left: \"+=100\"\n                }, {\n                    duration: 250,\n                    onChange: GAME.canvas.renderAll.bind(GAME.canvas),\n                    onComplete: function() {\n                        card.setSrc(card.sideUP == \"front\" ? card.frontImage : card.backImage, function(card) {});\n                        card.animate({\n                            scaleX: 1,\n                            left: \"-=100\"\n                        }, {\n                            duration: 250,\n                            onChange: GAME.canvas.renderAll.bind(GAME.canvas),\n                            onComplete: function() {}\n                        });\n                    },\n                    easing: fabric.util.ease.easeInOutQuad\n                });\n            },\n            toJson: function() {\n                const options = {\n                    left: this.left,\n                    top: this.top,\n                    stroke: this.stroke,\n                    strokeWidth: this.strokeWidth,\n                    shadow: this.shadow,\n                    selectable: this.selectable,\n                    id: this.id,\n                    sideUP: this.sideUP,\n                    frontImage: this.frontImage,\n                    backImage: this.backImage,\n                    flipeable: this.flipeable\n                };\n                return options;\n            }\n        });\n        const filter = new fabric.Image.filters.Noise({\n            noise: 15\n        });\n        card.filters.push(filter);\n        card.applyFilters();\n        //listen for clicks on the card, and flip it\n        //let isDragging = false;\n        //card.canBeDragged = () => {return true};\n        //GAME.canvas.add(card);\n        objects.push(card);\n        propagate;\n        callback(card);\n    });\n}\n//card deck\n//visually it is srepresented by a picture of a card inside a frame\n///the frame has a banner with the deck name and a number of cards\n//the deck is a group of the image, label and number\n//functionally the deck contyains an arary of cards jsons\n//and a function to draw a card from the deck\n//when a card is drawn, it is created locally based on a json popped from the deck\nconst $56c6f821917e065e$var$createDeck = (options)=>{\n    //image\n    let image = new fabric.Image.fromURL(options.image, function(image) {\n        image.set({\n            left: options.left,\n            //height: 300,\n            top: options.top,\n            selectable: false\n        });\n        // //label\n        let label = new fabric.IText(options.label, {\n            left: options.left + options.labelLeft,\n            top: options.top + options.labelTop,\n            fontSize: options.labelFontSize ? options.labelFontSize : 20,\n            fill: options.labelFontColor ? options.labelFontColor : \"black\",\n            selectable: false\n        });\n        //number\n        let number = new fabric.IText(options.number, {\n            left: options.left + options.numberLeft,\n            top: options.top + options.numberTop,\n            fontSize: options.numberFontSize ? options.numberFontSize : 20,\n            fill: options.numberFontColor ? options.numberFontColor : \"black\",\n            selectable: false\n        });\n        const animMenuOptions = {\n            left: options.left + 150,\n            top: options.top + 180,\n            image: \"./components/animMenu/ribbon.png\",\n            text: \"Draw\",\n            action: function() {\n                cardDeck.draw();\n            }\n        };\n        //animated button to draw a card\n        GAME.createAnimMenuItem(animMenuOptions, function(animMenu) {\n            //group\n            let group = new fabric.Group([\n                image,\n                label,\n                number\n            ], {\n                left: options.left,\n                top: options.top,\n                selectable: false,\n                //on hover show the draw button\n                hoverCursor: \"pointer\",\n                //allow content to extend outside the group\n                clipTo: null,\n                //set the anchor point to the top left corner\n                originX: \"left\",\n                originY: \"top\"\n            });\n            //when the group is hovered, show the draw button\n            group.on(\"mouseover\", function(options) {\n                console.log(\"hover on deck\");\n                animMenu.extend();\n            });\n            group.on(\"mouseout\", function(options) {\n                console.log(\"hover out deck\");\n                animMenu.contract();\n            });\n            //GAME.canvas.add(animMenu);\n            GAME.canvas.add(group);\n        });\n    });\n};\n\n\n//global vvariable to store the component currently being interacted with\nvar $eef371f870cf3c1b$var$currentComponent = null;\n// Function to handle image click\nfunction $eef371f870cf3c1b$var$handleImageClick(event) {\n    // Remove border from previously selected image, if any\n    if ($eef371f870cf3c1b$var$currentComponent) $eef371f870cf3c1b$var$currentComponent.style.border = \"\";\n    // Highlight the clicked image\n    event.target.style.border = \"2px solid red\";\n    // Store the clicked image\n    $eef371f870cf3c1b$var$currentComponent = event.target;\n}\n// Add event listener to all images with a certain class\nlet $eef371f870cf3c1b$var$images = document.querySelectorAll(\".interactive\");\n$eef371f870cf3c1b$var$images.forEach((image)=>{\n    image.addEventListener(\"click\", $eef371f870cf3c1b$var$handleImageClick);\n});\n//functions to activate and deactivate the interactive mode of the component\nconst $eef371f870cf3c1b$var$activateInteractiveMode = (component)=>{\n    if ($eef371f870cf3c1b$var$currentComponent) $eef371f870cf3c1b$var$currentComponent.deactivate();\n    $eef371f870cf3c1b$var$currentComponent = component;\n    component.activate();\n};\nconst $eef371f870cf3c1b$var$deactivateInteractiveMode = ()=>{\n    if ($eef371f870cf3c1b$var$currentComponent) $eef371f870cf3c1b$var$currentComponent.deactivate();\n    $eef371f870cf3c1b$var$currentComponent = null;\n};\n//make functions available to the global scope\nconsole.log(\"globalInteractionManager.js\");\nwindow.GAME = {};\nGAME.activateInteractiveMode = $eef371f870cf3c1b$var$activateInteractiveMode;\nGAME.deactivateInteractiveMode = $eef371f870cf3c1b$var$deactivateInteractiveMode;\n//make the interactive component class available to the global scope\nGAME.createInteractiveComponentGrp = (0, $17c8ab3e48388a81$export$81217b2b7b74004d);\n//make all components available to the global scope\nGAME.createAnimMenu = (0, $9b86c2780df4ee1e$export$b754317b91e90b58);\n//make the fabric canvas available to the global scope\nGAME.canvas = new fabric.Canvas(\"mainCanvas\", {\n    //4k resolution\n    width: window.innerWidth,\n    height: window.innerHeight,\n    name: \"mainCanvas\"\n});\nGAME.localObjects = []; //component definitions\nGAME.localState = {}; //where each component is, only if currently included in a canvas and not\n//inside a container (deck/bag..) (canvas, sideUP(visible face/value), position, owner(user or null), locked?, private?)\nGAME.canvases = [];\nGAME.canvases.push(GAME.canvas);\n// Zoom con mouse\nGAME.canvas.on(\"mouse:wheel\", function(opt) {\n    var delta = opt.e.deltaY;\n    var zoom = GAME.canvas.getZoom();\n    zoom *= 0.999 ** delta;\n    if (zoom > 20) zoom = 20;\n    if (zoom < 0.1) zoom = 0.1;\n    GAME.canvas.zoomToPoint({\n        x: opt.e.offsetX,\n        y: opt.e.offsetY\n    }, zoom);\n    opt.e.preventDefault();\n    opt.e.stopPropagation();\n});\n// Pan con mouse\nlet $eef371f870cf3c1b$var$panning = false;\nGAME.canvas.on(\"mouse:down\", function(opt) {\n    $eef371f870cf3c1b$var$panning = true;\n});\nGAME.canvas.on(\"mouse:up\", function(opt) {\n    $eef371f870cf3c1b$var$panning = false;\n});\nGAME.canvas.on(\"mouse:move\", function(opt) {\n    if (!$eef371f870cf3c1b$var$panning) return;\n    const e = opt.e;\n    const delta = new fabric.Point(e.movementX, e.movementY);\n    GAME.canvas.relativePan(delta);\n});\n// Zoom con touch\nvar $eef371f870cf3c1b$var$lastDist = 0;\nGAME.canvas.on(\"touchstart\", function(opt) {\n    var e = opt.e;\n    if (e.touches && e.touches.length == 2) {\n        let dist = $eef371f870cf3c1b$var$getDistance(e.touches[0], e.touches[1]);\n        $eef371f870cf3c1b$var$lastDist = dist;\n    }\n});\nGAME.canvas.on(\"touchmove\", function(opt) {\n    var e = opt.e;\n    if (e.touches && e.touches.length == 2) {\n        let dist = $eef371f870cf3c1b$var$getDistance(e.touches[0], e.touches[1]);\n        let zoom = GAME.canvas.getZoom();\n        zoom *= dist / $eef371f870cf3c1b$var$lastDist;\n        if (zoom > 20) zoom = 20;\n        if (zoom < 0.1) zoom = 0.1;\n        GAME.canvas.zoomToPoint({\n            x: opt.e.touches[0].clientX,\n            y: opt.e.touches[0].clientY\n        }, zoom);\n        $eef371f870cf3c1b$var$lastDist = dist;\n    }\n});\nfunction $eef371f870cf3c1b$var$getDistance(touch1, touch2) {\n    return Math.sqrt(Math.pow(touch2.clientX - touch1.clientX, 2) + Math.pow(touch2.clientY - touch1.clientY, 2));\n}\n// Pan con touch\nlet $eef371f870cf3c1b$var$lastX, $eef371f870cf3c1b$var$lastY;\nGAME.canvas.on(\"touchstart\", function(opt) {\n    var e = opt.e;\n    if (e.touches && e.touches.length === 1) {\n        $eef371f870cf3c1b$var$lastX = e.touches[0].clientX;\n        $eef371f870cf3c1b$var$lastY = e.touches[0].clientY;\n        $eef371f870cf3c1b$var$panning = true;\n    }\n});\nGAME.canvas.on(\"touchend\", function(opt) {\n    $eef371f870cf3c1b$var$panning = false;\n});\nGAME.canvas.on(\"touchmove\", function(opt) {\n    if ($eef371f870cf3c1b$var$panning && e.touches && e.touches.length === 1) {\n        var e = opt.e;\n        var deltaX = e.touches[0].clientX - $eef371f870cf3c1b$var$lastX;\n        var deltaY = e.touches[0].clientY - $eef371f870cf3c1b$var$lastY;\n        $eef371f870cf3c1b$var$lastX = e.touches[0].clientX;\n        $eef371f870cf3c1b$var$lastY = e.touches[0].clientY;\n        var delta = new fabric.Point(deltaX, deltaY);\n        GAME.canvas.relativePan(delta);\n    }\n});\n/*\n  // Función que se llama cuando el objeto comienza a moverse\nfunction onStartMoving(e) {\n  const obj = e.target; // El objeto que está siendo arrastrado\n  console.log(`Start dragging ${obj.type}`);\n  // Puedes llamar aquí a cualquier otra función\n  ///if(obj.dragStart){\n    obj.dragStart();\n  //}\n}\n\n// Función que se llama cuando el objeto se suelta\nfunction onDrop(e) {\n  const obj = e.target; // El objeto que ha sido soltado\n  console.log(`Dropped ${obj.type}`);\n    // Puedes llamar aquí a cualquier otra función\n   // if(obj.dragEnd){\n        obj.dragEnd();\n    //  }\n}\n\nGAME.canvas.on({\n  'object:moving': onStartMoving,\n  'object:modified': onDrop,\n});\n*/ GAME.addCardFunction = (0, $56c6f821917e065e$export$fdf7826c4b4a6c3f); //change zooming to use the mouse wheel\n /*\n  // Function to apply blur to all objects except the active one\nfunction applyBlurToAllExceptActive() {\n    \n   //create a rectangle to cover the canvas\n    var rect = new fabric.Rect({\n        left: 0,\n        top: 0,\n        width: GAME.canvas.width,\n        height: GAME.canvas.height,\n        fill: \"rgba(0,0,0,0.5)\",\n        selectable: false,\n        evented: false,\n        id: \"blurRect\", \n        opacity: 0,\n        //blur: 0.25\n        //filters: [new fabric.Image.filters.Blur({blur: 0.25})]\n        });\n        //must be on top of everything except the active object\n        GAME.canvas.add(rect);\n        rect.moveTo(1);\n        rect.opacity = 0.9;\n        GAME.CanvasObscurer = rect;\n\n\n    // Render the canvas to see the changes\n    GAME.canvas.renderAll();\n  }\n\n  GAME.applyBlurToAllExceptActive = applyBlurToAllExceptActive;\n\n    // Function to remove blur from all objects\nfunction removeBlurFromAll() {\n\n    //remove the blur rectangle\n    GAME.canvas.remove(GAME.CanvasObscurer);\n\n    GAME.canvas.renderAll();\n  }\n\n    GAME.removeBlurFromAll = removeBlurFromAll;*/  //GAME.syncWithServer = syncWithServer;\n\n\n//# sourceMappingURL=index.1a7c9cbe.js.map\n","//import all components\nimport { createInteractiveComponentGrp } from \"../components/CustomFabricClasses.js\";\nimport { createAnimMenu } from \"../components/animMenu/animMenu.js\";\nimport { addCard } from \"./fabricImpl.js\";\n\n\n//global vvariable to store the component currently being interacted with\nvar currentComponent = null;\n\n\n// Function to handle image click\nfunction handleImageClick(event) {\n    // Remove border from previously selected image, if any\n    if (currentComponent) {\n      currentComponent.style.border = '';\n    }\n\n    // Highlight the clicked image\n    event.target.style.border = '2px solid red';\n\n    // Store the clicked image\n    currentComponent = event.target;\n}\n\n// Add event listener to all images with a certain class\nlet images = document.querySelectorAll('.interactive');\nimages.forEach(image => {\n    image.addEventListener('click', handleImageClick);\n});\n\n\n\n//functions to activate and deactivate the interactive mode of the component\n\nconst activateInteractiveMode = (component) => {\n    if (currentComponent) {\n        currentComponent.deactivate();\n    }\n    currentComponent = component;\n    component.activate();\n}\n\nconst deactivateInteractiveMode = () => {\n    if (currentComponent) {\n        currentComponent.deactivate();\n    }\n    currentComponent = null;\n}\n\n//make functions available to the global scope\nconsole.log(\"globalInteractionManager.js\");\n\nwindow.GAME = {};\n\nGAME.activateInteractiveMode = activateInteractiveMode;\nGAME.deactivateInteractiveMode = deactivateInteractiveMode;\n\n//make the interactive component class available to the global scope\n\nGAME.createInteractiveComponentGrp = createInteractiveComponentGrp;\n\n//make all components available to the global scope\n\nGAME.createAnimMenu = createAnimMenu;\n\n//make the fabric canvas available to the global scope\n\nGAME.canvas = new fabric.Canvas(\"mainCanvas\", {\n    //4k resolution\n    width: window.innerWidth,\n    height: window.innerHeight,\n    name:\"mainCanvas\"\n  });\n  GAME.localObjects=[]; //component definitions\n  GAME.localState={};//where each component is, only if currently included in a canvas and not\n  //inside a container (deck/bag..) (canvas, sideUP(visible face/value), position, owner(user or null), locked?, private?)\n  GAME.canvases=[];\n  GAME.canvases.push(GAME.canvas);\n\n// Zoom con mouse\nGAME.canvas.on('mouse:wheel', function(opt) {\n  var delta = opt.e.deltaY;\n  var zoom = GAME.canvas.getZoom();\n  zoom *= 0.999 ** delta;\n  if (zoom > 20) zoom = 20;\n  if (zoom < 0.1) zoom = 0.1;\n  GAME.canvas.zoomToPoint({ x: opt.e.offsetX, y: opt.e.offsetY }, zoom);\n  opt.e.preventDefault();\n  opt.e.stopPropagation();\n});\n\n// Pan con mouse\nlet panning = false;\nGAME.canvas.on('mouse:down', function (opt) {\n  panning = true;\n});\nGAME.canvas.on('mouse:up', function (opt) {\n  panning = false;\n});\nGAME.canvas.on('mouse:move', function (opt) {\n  if (!panning) return;\n  const e = opt.e;\n  const delta = new fabric.Point(e.movementX, e.movementY);\n  GAME.canvas.relativePan(delta);\n});\n\n// Zoom con touch\nvar lastDist = 0;\nGAME.canvas.on('touchstart', function(opt) {\n  var e = opt.e;\n  if (e.touches && e.touches.length == 2) {\n    let dist = getDistance(e.touches[0], e.touches[1]);\n    lastDist = dist;\n  }\n});\nGAME.canvas.on('touchmove', function(opt) {\n  var e = opt.e;\n  if (e.touches && e.touches.length == 2) {\n    let dist = getDistance(e.touches[0], e.touches[1]);\n    let zoom = GAME.canvas.getZoom();\n    zoom *= dist / lastDist;\n    if (zoom > 20) zoom = 20;\n    if (zoom < 0.1) zoom = 0.1;\n    GAME.canvas.zoomToPoint({ x: opt.e.touches[0].clientX, y: opt.e.touches[0].clientY }, zoom);\n    lastDist = dist;\n  }\n});\nfunction getDistance(touch1, touch2) {\n  return Math.sqrt(Math.pow(touch2.clientX - touch1.clientX, 2) + Math.pow(touch2.clientY - touch1.clientY, 2));\n}\n\n// Pan con touch\nlet lastX, lastY;\nGAME.canvas.on('touchstart', function (opt) {\n  var e = opt.e;\n  if (e.touches && e.touches.length === 1) {\n    lastX = e.touches[0].clientX;\n    lastY = e.touches[0].clientY;\n    panning = true;\n  }\n});\nGAME.canvas.on('touchend', function (opt) {\n  panning = false;\n});\nGAME.canvas.on('touchmove', function (opt) {\n  if (panning && e.touches && e.touches.length === 1) {\n    var e = opt.e;\n    var deltaX = e.touches[0].clientX - lastX;\n    var deltaY = e.touches[0].clientY - lastY;\n    lastX = e.touches[0].clientX;\n    lastY = e.touches[0].clientY;\n    var delta = new fabric.Point(deltaX, deltaY);\n    GAME.canvas.relativePan(delta);\n  }\n});\n\n\n/*\n  // Función que se llama cuando el objeto comienza a moverse\nfunction onStartMoving(e) {\n  const obj = e.target; // El objeto que está siendo arrastrado\n  console.log(`Start dragging ${obj.type}`);\n  // Puedes llamar aquí a cualquier otra función\n  ///if(obj.dragStart){\n    obj.dragStart();\n  //}\n}\n\n// Función que se llama cuando el objeto se suelta\nfunction onDrop(e) {\n  const obj = e.target; // El objeto que ha sido soltado\n  console.log(`Dropped ${obj.type}`);\n    // Puedes llamar aquí a cualquier otra función\n   // if(obj.dragEnd){\n        obj.dragEnd();\n    //  }\n}\n\nGAME.canvas.on({\n  'object:moving': onStartMoving,\n  'object:modified': onDrop,\n});\n*/\n\n  GAME.addCardFunction= addCard;\n  \n  //change zooming to use the mouse wheel\n\n/*\n  // Function to apply blur to all objects except the active one\nfunction applyBlurToAllExceptActive() {\n    \n   //create a rectangle to cover the canvas\n    var rect = new fabric.Rect({\n        left: 0,\n        top: 0,\n        width: GAME.canvas.width,\n        height: GAME.canvas.height,\n        fill: \"rgba(0,0,0,0.5)\",\n        selectable: false,\n        evented: false,\n        id: \"blurRect\", \n        opacity: 0,\n        //blur: 0.25\n        //filters: [new fabric.Image.filters.Blur({blur: 0.25})]\n        });\n        //must be on top of everything except the active object\n        GAME.canvas.add(rect);\n        rect.moveTo(1);\n        rect.opacity = 0.9;\n        GAME.CanvasObscurer = rect;\n\n\n    // Render the canvas to see the changes\n    GAME.canvas.renderAll();\n  }\n\n  GAME.applyBlurToAllExceptActive = applyBlurToAllExceptActive;\n\n    // Function to remove blur from all objects\nfunction removeBlurFromAll() {\n\n    //remove the blur rectangle\n    GAME.canvas.remove(GAME.CanvasObscurer);\n\n    GAME.canvas.renderAll();\n  }\n\n    GAME.removeBlurFromAll = removeBlurFromAll;*/\n    //GAME.syncWithServer = syncWithServer;","\nexport function createInteractiveComponentGrp(options, onComplete) {\n\n    console.log(\"createInteractiveComponentGrp: \", options);\n    createFrontImage(options, onComplete);\n}\n//create two images, one for the front and one for the back\n//and add them to the group\n//the front image is the one that will be displayed\n//the back image is the one that will be displayed when the card is flipped\n\nconst createFrontImage = (options, onComplete) => {\n    let frontImage = new fabric.Image.fromURL(options.frontImage, (frontImage) => {\n        frontImage.set({\n            originX: \"center\",\n            originY: \"center\",\n            opacity: options.sideUp == \"front\" ? 1 : 0,\n          \n        });\n        console.log(\"frontImage: \", frontImage);\n        createBackImage(frontImage, options, onComplete);\n    });\n}\nconst createBackImage = (frontImage, options, onComplete) => {\n    let backImage = new fabric.Image.fromURL(options.backImage, (backImage) => {\n        backImage.set({\n            originX: \"center\",\n            originY: \"center\",\n            opacity: options.sideUp == \"back\" ? 1 : 0\n        });\n        console.log(\"backImage: \", backImage);\n        createGroup(frontImage, backImage, options, onComplete);\n    });\n}\n\nconst createGroup = (frontImage, backImage, options, onComplete) => {\n    // Create a new group with fabric.Group\n    let group = new fabric.Group([frontImage, backImage], {\n        left: options.left,\n        top: options.top,\n        //black stroke, 2px, opacity 0.5\n        stroke: \"rgb(0,0,10)\",\n        strokeWidth: 2,\n        selectable: options.selectable,\n        id: options.id,\n        sideUp: options.sideUp,\n        isFlipeable: options.flipeable,\n        isDraggable: options.draggable ? options.draggable : true,\n        isLocked: options.locked ? options.locked : false,\n        isDragging: false,\n        shadow: {\n            color: 'rgba(0,0,0,1)',\n            blur: 1,\n            offsetX: 10,\n            offsetY: 10\n        },\n        borderOpacityWhenMoving: 0.5,\n        \n        hasControls: false,\n    });\n\n    console.log(\"group: \", group);\n    // Method to activate the group\n    group.activate = function () {\n        this.active = true;\n        if (this.onActivate) {\n            this.onActivate();\n        }\n    };\n\n    // Method to deactivate the group\n    group.deactivate = function () {\n        this.active = false;\n        if (this.onDeactivate) {\n            this.onDeactivate();\n        }\n    };\n\n    // Method to check if the group can be dragged\n    group.canBeDragged = function () {\n        return this.isDraggable && !this.isLocked;\n    };\n\n    // Method to initiate drag\n    group.dragStart = function () {\n        if (!this.canBeDragged() || this.isDragging) {\n            return;\n        }\n        console.log(\"dragStart\");\n\n        let initialBlur = this.shadow.blur;\n        let initialOffsetX = this.shadow.offsetX;\n        let initialOffsetY = this.shadow.offsetY;\n\n        this.animate(\n            {\n                scaleX: 1.1,\n                scaleY: 1.1,\n                shadow: {\n                    //blur: 3,\n                    offsetX: initialOffsetX + 25,\n                    offsetY: initialOffsetY + 25\n                }\n            },\n            {\n                duration: 200,\n                onChange: () => {\n                    GAME.canvas.renderAll();\n                },\n                onComplete: function () { },\n                easing: fabric.util.ease.easeInOutQuad,\n            }\n        );\n        this.isDragging = true;\n    };\n\n    // Method to end drag\n    group.dragEnd = function () {\n        this.isDragging = false;\n\n        let currentBlur = this.shadow.blur;\n        let currentOffsetX = this.shadow.offsetX;\n        let currentOffsetY = this.shadow.offsetY;\n        this.animate(\n            {\n                scaleX: 1,\n                scaleY: 1,\n                shadow: {\n                    blur: 0.1,\n                    offsetX: currentOffsetX - 5,\n                    offsetY: currentOffsetY - 5\n                }\n            },\n            {\n                duration: 100,\n                onChange: () => {\n\n                    GAME.canvas.renderAll();\n                },\n                onComplete: function () {\n                    // Sync with server here\n                    GAME.syncWithServer();\n                },\n                easing: fabric.util.ease.easeInOutQuad,\n            }\n        );\n    };\n\n    // Method to convert the group to JSON\n    group.toJson = function () {\n        const options = {\n            left: this.left,\n            top: this.top,\n            selectable: this.selectable,\n            id: this.id,\n            sideUP: this.sideUP,\n            frontImage: this.frontImage,\n            backImage: this.backImage,\n            flipeable: this.isFlipeable,\n            draggable: this.isDraggable,\n            locked: this.isLocked,\n            canvas:GAME.canvas.name\n\n        };\n        return options;\n    };\n\n    // Method to update the group from JSON\n    group.updateFromJson = function (json) {\n        if (json.sideUP != this.sideUP) {\n            this.flip();\n        }\n        this.animate(\n            {\n                left: json.left,\n                top: json.top,\n            },\n            {\n                duration: 100,\n                onChange: GAME.canvas.renderAll.bind(GAME.canvas),\n                onComplete: function () { },\n                easing: fabric.util.ease.easeInOutQuad,\n            }\n        );\n    };\n\n    // Call onComplete function\n    onComplete(group);\n};\n\n\n\n","import { createAnimMenuItem } from './animMenuItem.js';\n/***\n * a grouup of animated menu items\n * and a trigger element\n * \n * */\n\nconst animMenDefaultOptions = {\n    left: 50,\n    top: 50,\n    trigger: {\n        x0: 50,\n        y0: 50,\n        x1: 250,\n        y1: 250,\n    },\n    menuItems: [\n        {\n            left: 50,\n            top: 50,\n            image: \"./components/animMenu/ribbon.png\",\n            text: \"Draw\",\n            action: function () {\nconsole.log(\"draw\");\n                        },\n        },\n        {\n            left: 50,\n            top: 50,\n            image: \"./components/animMenu/ribbon.png\",\n            text: \"shufle\",\n            action: function () {\nconsole.log(\"shuffle\");\n                        \n            },\n        },\n        {\n            left: 50,\n            top: 50,\n            image: \"./components/animMenu/ribbon.png\",\n            text: \"action\",\n            action: function () {\nconsole.log(\"action\");\n            },\n        },\n    ],\n};\n\nexport const createAnimMenu = (options = animMenDefaultOptions) => {\n    //a collision box to detect clicks/ touches\n    let collisionBox = new fabric.Rect({\n        left: options.trigger.x0,\n        top: options.trigger.y0,\n        width: options.trigger.x1 - options.trigger.x0,\n        height: options.trigger.y1 - options.trigger.y0,\n        fill: \"transparent\",\n        selectable: false,\n        //if game.debug is true, show the collision box\n        borderColor: \"red\",\n        strokeWidth: GAME.debug ? 1 : 0,\n        hoverCursor: \"pointer\",\n    });\n    //list of menu items\n    let menuItems = [];\n    //create the menu items\n    for (let i = 0; i < options.menuItems.length; i++) {\n        let menuItem = createAnimMenuItem(options.menuItems[i]);\n        menuItems.push(menuItem);\n    }\n\n    \n    \n    //create the menu group\n    let menu = new InteractiveComponentGrp([collisionBox, ...menuItems], {\n        left: options.left,\n        top: options.top,\n        selectable: false,\n        clipTo: null,\n        //set the anchor point to the top left corner\n        originX: \"left\",\n        originY: \"top\",\n        scaleX: 1,\n        scaleY: 1,\n        onActivate: function () {\n            console.log(\"menu activated\");\n            //show each menu item in sequence with a delay\n            for (let i = 0; i < menuItems.length; i++) {\n                setTimeout(function () {\n                    menuItems[i].extend();\n                }, i * 100);\n            }\n            animMenu.extend();\n            \n        },\n        onDeactivate: function () {\n            console.log(\"menu deactivated\");\n            //hide each menu item in sequence with a delay\n            for (let i = 0; i < menuItems.length; i++) {\n                setTimeout(function () {\n                    menuItems[i].contract();\n                }, i * 100);\n            }\n        }\n    });\n    collisionBox.on(\"mousedown\", function (options) {\n        console.log(\"clicked on collision box\");\n        //toggle the menu\n        if (menu.active) {\n            menu.deactivate();\n        } else {\n            menu.activate();\n        }\n    });\n    GAME.canvas.add(menu);\n    return menu;\n}","\n/**\n * @fileoverview animMenuitem.js creates a menu item for the animMenu\n **/\n\n/**\n * \n * @param {*} options : options for the menu item, including the image, text, and action\n * @param {*} callback : callback function to call when the menu item is created\n */\nexport const createAnimMenuItem = (options, callback = () => { }) => {\n  try {\n  let img = new fabric.Image.fromURL(options.image, function (img) {\n    img.set({\n      left: options.left,\n      top: options.top,\n      selectable: false,\n    });\n    let text = new fabric.IText(options.text, {\n      //pivot on the left side of the text\n      originX: \"left\",\n      left: options.left + 680,\n      top: options.top + 15,\n      fontSize: 120,\n      fill: \"black\",\n      height: 80,\n      width: 1500,\n      selectable: false\n    });\n    let group = new fabric.Group([img, text], {\n      visible: false,\n      selectable: false,\n      //start really small then animate to normal size on hover\n      scaleX: 0.1,\n      extend: function () {\n        group.visible = true;\n        group.animate(\n          {\n            scaleX: 1,\n            scaleY: 1,\n          },\n          {\n            duration: 200,\n            onChange: GAME.canvas.renderAll.bind(GAME.canvas),\n            onComplete: function () { },\n            easing: fabric.util.ease.easeInOutQuad,\n          }\n        );\n\n      },\n      contract: function () {\n        group.animate(\n          {\n            scaleX: 0.1,\n          },\n          {\n            duration: 200,\n            onChange: GAME.canvas.renderAll.bind(GAME.canvas),\n            onComplete: function () {\n              group.visible = false;\n            },\n            easing: fabric.util.ease.easeInOutQuad,\n          }\n        );\n      },\n    });\n    GAME.canvas.add(group); \n    //listen for taps on the button\n    //and perform the action\n    group.on(\"mousedown\", function () {\n      console.log(\"anim menu item clicked\");\n      options.action();\n    }n    callback(group);\n    return group;\n  }\n  );\n} catch (error) {\n //TODO: handle error, implement logging\n console.log(error);   \n}\n}\n","\n\nfunction addCard(options, propagate = true, callback = function (card) { }) {\n  let card = new fabric.Image.fromURL(options.frontImage, function (card) {\n    card.set({\n      left: options.left,\n      top: options.top,\n      stroke: options.stroke,\n      strokeWidth: options.strokeWidth,\n      shadow: options.shadow,\n      selectable: options.selectable,\n      id: options.id,\n      sideUP: options.sideUP,\n      frontImage: options.frontImage,\n      backImage: options.backImage,\n      flipeable: options.flipeable,\n      dragStart: dragObj(card),\n      dragEnd: dragObjEnd(card),\n      flip: function () {\n        //swith the image to cardGenBkg\n        card.sideUP = card.sideUP == \"back\" ? \"front\" : \"back\";\n        //animate the flip\n        card.animate(\n          { scaleX: 0, left: \"+=100\" },\n          {\n            duration: 250,\n            onChange: GAME.canvas.renderAll.bind(GAME.canvas),\n            onComplete: function () {\n              card.setSrc(\n                card.sideUP == \"front\"\n                  ? card.frontImage\n                  : card.backImage,\n                function (card) { }\n              );\n              card.animate(\n                { scaleX: 1, left: \"-=100\" },\n                {\n                  duration: 250,\n                  onChange: GAME.canvas.renderAll.bind(GAME.canvas),\n                  onComplete: function () { },\n                }\n              );\n            },\n            easing: fabric.util.ease.easeInOutQuad,\n          }\n        );\n      },\n      toJson: function () {\n        const options = {\n          left: this.left,\n          top: this.top,\n          stroke: this.stroke,\n          strokeWidth: this.strokeWidth,\n          shadow: this.shadow,\n          selectable: this.selectable,\n          id: this.id,\n          sideUP: this.sideUP,\n          frontImage: this.frontImage,\n          backImage: this.backImage,\n          flipeable: this.flipeable,\n        };\n        return options;\n      }\n    }\n\n    );\n    const filter = new fabric.Image.filters.Noise({\n      noise: 15,\n    });\n    card.filters.push(filter);\n    card.applyFilters();\n\n    //listen for clicks on the card, and flip it\n    //let isDragging = false;\n    //card.canBeDragged = () => {return true};\n    \n    //GAME.canvas.add(card);\n    objects.push(card);\n    if (propagate) {\n      //only when the card is added locally\n      //send the new state to the server to be propagated\n      //to the other players\n      //syncWithServer();\n    }\n    callback(card)\n  }\n\n  );\n}\n\n\n\n\n//card deck\n//visually it is srepresented by a picture of a card inside a frame\n///the frame has a banner with the deck name and a number of cards\n//the deck is a group of the image, label and number\n//functionally the deck contyains an arary of cards jsons\n//and a function to draw a card from the deck\n//when a card is drawn, it is created locally based on a json popped from the deck\n\nconst createDeck = (options) => {\n\n  //image\n  let image = new fabric.Image.fromURL(options.image, function (image) {\n    image.set({\n      left: options.left,\n      //height: 300,\n      top: options.top,\n      selectable: false,\n    });\n    // //label\n    let label = new fabric.IText(options.label, {\n      left: options.left + options.labelLeft,\n      top: options.top + options.labelTop,\n      fontSize: options.labelFontSize ? options.labelFontSize : 20,\n      fill: options.labelFontColor ? options.labelFontColor : \"black\",\n      selectable: false,\n    });\n    //number\n    let number = new fabric.IText(options.number, {\n      left: options.left + options.numberLeft,\n      top: options.top + options.numberTop,\n      fontSize: options.numberFontSize ? options.numberFontSize : 20,\n      fill: options.numberFontColor ? options.numberFontColor : \"black\",\n      selectable: false,\n\n    });\n\n    const animMenuOptions = {\n      left: options.left + 150,\n      top: options.top + 180,\n      image: \"./components/animMenu/ribbon.png\",\n      text: \"Draw\",\n      action: function () {\n        cardDeck.draw();\n      },\n    };\n    \n\n    //animated button to draw a card\n  GAME.createAnimMenuItem(animMenuOptions, function (animMenu) {\n\n\n      //group\n      let group = new fabric.Group([image, label, number], {\n        left: options.left,\n        top: options.top,\n        selectable: false,\n        //on hover show the draw button\n        hoverCursor: \"pointer\",\n        //allow content to extend outside the group\n        clipTo: null,\n        //set the anchor point to the top left corner\n        originX: \"left\",\n        originY: \"top\",\n        //increase the size of the group to allow the content to extend outside\n        //but don't change the position\n\n\n\n\n      });\n      //when the group is hovered, show the draw button\n      group.on(\"mouseover\", function (options) {\n        console.log(\"hover on deck\");\n        animMenu.extend();\n      });\n      group.on(\"mouseout\", function (options) {\n        console.log(\"hover out deck\");\n        \n        animMenu.contract();\n      });\n      //GAME.canvas.add(animMenu);\n      GAME.canvas.add(group);\n    });\n  });\n\n}\n\n\n\n/*\nlet cardGenBkg = new fabric.Image.fromURL(\"/resources/b.png\", function (\n  cardGenBkg\n) {\n  cardGenBkg.set({\n    left: 80,\n    top: 80,\n    width: 200,\n    height: 350,\n    selectable: false,\n    visible: false,\n  });\n  GAME.canvas.add(cardGenBkg);\n});\n*/\n\n\n\n\n\nexport { addCard };\n"],"names":["$eef371f870cf3c1b$var$lastX","$eef371f870cf3c1b$var$lastY","$17c8ab3e48388a81$var$createFrontImage","options","onComplete","fabric","Image","fromURL","frontImage","set","originX","originY","opacity","sideUp","console","log","$17c8ab3e48388a81$var$createBackImage","backImage","$17c8ab3e48388a81$var$createGroup","group","Group","left","top","stroke","strokeWidth","selectable","id","isFlipeable","flipeable","isDraggable","draggable","isLocked","locked","isDragging","shadow","color","blur","offsetX","offsetY","borderOpacityWhenMoving","hasControls","activate","active","onActivate","deactivate","onDeactivate","canBeDragged","dragStart","initialOffsetX","initialOffsetY","animate","scaleX","scaleY","duration","onChange","GAME","canvas","renderAll","easing","util","ease","easeInOutQuad","dragEnd","currentOffsetX","currentOffsetY","syncWithServer","toJson","sideUP","name","updateFromJson","json","flip","bind","$5e8f84e13a16e667$export$8cc41bc22046193e","callback","image","img","text","IText","fontSize","fill","height","width","visible","extend","contract","add","on","action","error","$9b86c2780df4ee1e$var$animMenDefaultOptions","trigger","x0","y0","x1","y1","menuItems","$eef371f870cf3c1b$var$currentComponent","$eef371f870cf3c1b$var$handleImageClick","event","style","border","target","$eef371f870cf3c1b$var$images","document","querySelectorAll","forEach","addEventListener","window","activateInteractiveMode","component","deactivateInteractiveMode","createInteractiveComponentGrp","createAnimMenu","collisionBox","Rect","borderColor","debug","hoverCursor","i","length","menuItem","push","menu","InteractiveComponentGrp","clipTo","setTimeout","animMenu","Canvas","innerWidth","innerHeight","localObjects","localState","canvases","opt","delta","e","deltaY","zoom","getZoom","zoomToPoint","x","y","preventDefault","stopPropagation","$eef371f870cf3c1b$var$panning","Point","movementX","movementY","relativePan","$eef371f870cf3c1b$var$lastDist","$eef371f870cf3c1b$var$getDistance","touch1","touch2","Math","sqrt","pow","clientX","clientY","touches","dist","deltaX","addCardFunction","propagate","card","dragObj","dragObjEnd","setSrc","filter","filters","Noise","noise","applyFilters","objects"],"version":3,"file":"index.1a7c9cbe.js.map"}